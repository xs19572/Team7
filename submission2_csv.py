# -*- coding: utf-8 -*-
"""submission2.csv

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iDBGZatm59aiQb4gzQeJ1JrmNosAQPfq
"""

from google.colab import files
uploaded = files.upload()

for fn in uploaded.keys():
  print('User uploaded file "{name}"with length {length} bytes'.format(name=fn, length=len(uploaded[fn])))

import io
import pandas as pd

df_train = pd.read_csv(io.StringIO(uploaded['train.csv'].decode('utf-8')))
print(df_train.head())

missing_count =  (df_train.isnull().sum() / len(df_train)) * 100
missing_count = missing_count[missing_count > 0]
print(missing_count.sort_values())

import seaborn as sns
sns.distplot(df_train['SalePrice'])

import numpy as np

target = np.log(df_train['SalePrice'])
sns.distplot(target)

numeric_data = df_train.select_dtypes(include = [np.number])

categorical_data = df_train.select_dtypes(exclude = [np.number])

print('There are {0} numerical and {1} categorical features in the training data'.\
      format(numeric_data.shape[1], categorical_data.shape[1]))

del numeric_data['Id']
numeric_data.columns

corr = numeric_data.corr()
sns.heatmap(corr)

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline

df_train.groupby(['YrSold', 'MoSold']).Id.count().plot(kind='bar', figsize=(14,4))
plt.title("When was the property sold?")
plt.show()

df_train.groupby(['Neighborhood']).Id.count().\
  sort_values().\
  plot(kind='bar', figsize=(10,4))
plt.title("Where are the most of the property located?")
plt.show()

f = pd.melt(df_train, value_vars=sorted(numeric_data))
g = sns.FacetGrid(f, col='variable', col_wrap=4, sharex=False, sharey=False)
g = g.map(sns.distplot, 'value')

df_train['MSSubClass'] = df_train.MSSubClass.apply(lambda x: str(x))
df_train['MoSold'] = df_train.MoSold.apply(lambda x: str(x))
df_train['YrSold'] = df_train.YrSold.apply(lambda x: str(x))

numeric_data = df_train.select_dtypes(include = [np.number])

categorical_data = df_train.select_dtypes(exclude = [np.number])

print('There are {0} numerical and {1} categorical features in the training data'.\
      format(numeric_data.shape[1], categorical_data.shape[1]))

f = pd.melt(df_train, value_vars=sorted(categorical_data))
g = sns.FacetGrid(f, col='variable',col_wrap=4, sharex=False, sharey=False)
g = g.map(sns.countplot, 'value')
[plt.setp(ax.get_xticklabels(), rotation=60) for ax in g.axes.flat]
g.fig.tight_layout()
plt.show()

# ALLEY
df_train.Alley.replace({'Grvl':1, 'Pave':2},inplace=True)
# LOT SHAPE
df_train.LotShape.replace({'Reg':1, 'IR1':2, 'IR2':3, 'IR3':4},inplace=True)
# BUILDING TYPE
df_train.BldgType.replace({'1fam':1, '2fmCon':2, 'Duplex', 'Twnhse':4, 'Twnhs':5},inplace=True)
# Land Slope
df_train.Alley.replace({'Sev':1, 'Mod':2, 'Gtl':3},inplace=True)
# Utilities
df_train.Utilities.replace({'ELO':1, 'NoSeWa':2, 'NoSewr':3, 'ALLPub': 4},inplace=True)
# LAND CONTOUR
df_train.LandContour.replace({'Low':1, 'HLS':2, 'Bnk':3, 'Lnl': 4},inplace=True)
# EXTERIOR QUALITY
df_train.ExterQual.replace({'Po':1, 'Fa':2, 'TA':3, 'Gd': 4,'Ex':5},inplace=True)
# EXTERIOR CONDITION
df_train.ExterCond.replace({'Po':1, 'Fa':2, 'TA':3, 'Gd': 4,'Ex':5},inplace=True)
# BASEMENT QUALITY
df_train.BsmtCond.replace({'Po':1, 'Fa':2, 'TA':3, 'Gd': 4,'Ex':5},inplace=True)
# BASEMENT CONDITION
df_train.BsmtQual.replace({'Po':1, 'Fa':2, 'TA':3, 'Gd': 4,'Ex':5},inplace=True)
# FINISHED BASEMENT 1 RATING
df_train.BsmtExposure.replace({'':1, '':2, '':3, '': 4,'':5},inplace=True)
# FINISHED BASEMENT 2 RATING
df_train.BsmtFinType1.replace({'Unf':1, 'LwQ':2, 'Rec':3, 'BLQ': 4,'ALQ':5,'GLQ':6},inplace=True)
# HEATING QUALITY AND CONDITION
df_train.BsmtFinType2.replace({'Unf':1, 'LwQ':2, 'Rec':3, 'BLQ': 4,'ALQ':5,'GLQ':6},inplace=True)
# KITCHEN QUALITY
df_train.HeatingQC.replace({'Po':1, 'Fa':2, 'TA':3, 'Gd': 4,'Ex':5},inplace=True)
# HOME FUNCTIONALITY
df_train.KitchenQual.replace({'Po':1, 'Fa':2, 'TA':3, 'Gd': 4,'Ex':5},inplace=True)
# FIREPLACE QUALITY
df_train.Functional.replace({'Sal':1, 'Sev':2, 'Maj2':3, 'Maj1': 4,'Mod':5},inplace=True)
# GARAGE FINISH
df_train.FireplaceQu.replace({'Po':1, 'Fa':2, 'TA':3, 'Gd': 4,'Ex':5},inplace=True)
# GARAGE QUALITY
df_train.Alley.replace({'Po':1, 'Fa':2, 'TA':3, 'Gd': 4,'Ex':5},inplace=True)
# GARAGE CONDITION
df_train.Alley.replace({'Po':1, 'Fa':2, 'TA':3,'Gd':4,'Ex':5},inplace=True)
# PAVED DRIVEWAY
df_train.Alley.replace({'N':1, 'P':2, 'Y':3, '': 4,'':5},inplace=True)
# POOL UALITY
df_train.Alley.replace({'Fa':1, 'TA':2, 'Gd':3, 'Ex': 4},inplace=True)

cat_to_num_features = {'Alley','BldgType','LotShape','LandContour','Utilities','Landslope','ExterQual','ExterCond','BsmtQual','BsmtExposure','BsmtFinType1','BsmtFinType2','HeatingQC','KitchenQual','Functional','GarageQuality','GarageCond','PavedDrive','PoolQC','BsmtCon','FirePlaceQu','GarageFinish','',}